//1.方式作用:
//2.方法的参数
//3.方法返回值
//4.原有的数组是否发生改变.

//1.push(item1....)
    1)向数组末尾新增项;
    2)参数是新增的那一项:
    3)返回值是新数组的长度,数组成员的个数;
    4)原有数组发生改变;

//2.pop(空)
    1)删除数组的最后一项;
    2)不需要传参数
    3)被删除的那一项
    4)原有数组发生改变

//3.unshift(item1....)
    1)向数组开头新增项
    2)需要传参数
    3)返回值是数组成员个数
    4)原有数组发生改变

//4.shift()
    1)删除数组的第一项
    2)不需要传参
    3)返回值是删除的项
    4)数组发生改变

//5.slice()
    1)数组的截取
    2)slice(m,n)从数组索引m开始,但不包含n-----------------[m,n)
        slice(m)  从索引m开始到截取的末尾.
        slice()  返回整个数组
        索引是负数,让当前length+该负数;
    3)返回值是截取的数组
    4)原有数组不发生变化

 //6.splice
    1)删除数组中的某几项
    2)splice(m,n)  从索引m开始,删除n项;
        splice(m)  从索引m开始全部删除
        splice(m.n,item1,.....,itemX) 替换从索引m开始的n项,插入item1到itemX
    3)返回值,删除的那几项,并且以数组的方式返回;
    4)原有数组发生变化
    ----数组塌陷,删除一项后,后面项的索引都会发生变化.删除这一样后面的所有项的索引都要进行重新计算.

 //7.sort
    1)数组排序;
    2)
        1.sort() 只能对数字成员是相同位数的排序
        2.sort(function(a,b){return a-b;}) 从小到大排序;
        3.sort(function(a,b){return b-a;}) 从大到小排序;
    3)返回值是排序后的数组
    4)原有数组发生改变.

 //8.reverse()
    1)将数组倒序输出
    2)不需要传参
    3)返回值,倒序数组
    4)原有数组发生改变

 //9.concat()
    1)数组的拼接
    2)
        1,不传递参数,数组的复制
        2,传递参数,把传递的参数或者数组,拼接在原有数组的后面;
    3)拼接后的数组
    4)原数组不发生改变

 //10.join
    1)数组成员按照特定的字符连接成一个字符串
    2)
        1.不传递参数默认按照逗号分开
        2.传参数
    3)返回值 拼接后的字符串
    4)原有数组不发生变化


 //11.indexOf
    1)检测数组成员第一次出现的索引位置,如果该项不存在,返回-1
    2)需要参数
    3)返回值是,返回该成员在数组中第一次出现的位置
    4)原有数组不发生改变.

 //12.lastIndexOf
     1)检测数组成员最后一次出现的索引位置,如果该项不存在,返回-1
     2)需要参数
     3)返回值是,返回该成员在数组中最后一次出现的位置
     4)原有数组不发生改变.

 //13.map(function (item.index){})
    1)遍历数组和映射
    2)需要参数
    3)映射之后的数组
    4)原有数组不发生改变

 //14.forEach
    1)遍历数组;没有返回值;
    2)需要参数
    3)返回值undefined
    4)原有数组不发生改变;

 //15.toString
    1)转字符串
    2)不需要参数
    3)返回值:一个去了中括号的字符串
    4)原有数组不发生变化.


